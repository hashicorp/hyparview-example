// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/hyparview.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HyparviewEmpty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HyparviewEmpty) Reset()         { *m = HyparviewEmpty{} }
func (m *HyparviewEmpty) String() string { return proto.CompactTextString(m) }
func (*HyparviewEmpty) ProtoMessage()    {}
func (*HyparviewEmpty) Descriptor() ([]byte, []int) {
	return fileDescriptor_hyparview_d23255bfd5a25f1c, []int{0}
}
func (m *HyparviewEmpty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HyparviewEmpty.Unmarshal(m, b)
}
func (m *HyparviewEmpty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HyparviewEmpty.Marshal(b, m, deterministic)
}
func (dst *HyparviewEmpty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HyparviewEmpty.Merge(dst, src)
}
func (m *HyparviewEmpty) XXX_Size() int {
	return xxx_messageInfo_HyparviewEmpty.Size(m)
}
func (m *HyparviewEmpty) XXX_DiscardUnknown() {
	xxx_messageInfo_HyparviewEmpty.DiscardUnknown(m)
}

var xxx_messageInfo_HyparviewEmpty proto.InternalMessageInfo

type FromRequest struct {
	From                 string   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FromRequest) Reset()         { *m = FromRequest{} }
func (m *FromRequest) String() string { return proto.CompactTextString(m) }
func (*FromRequest) ProtoMessage()    {}
func (*FromRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_hyparview_d23255bfd5a25f1c, []int{1}
}
func (m *FromRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FromRequest.Unmarshal(m, b)
}
func (m *FromRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FromRequest.Marshal(b, m, deterministic)
}
func (dst *FromRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FromRequest.Merge(dst, src)
}
func (m *FromRequest) XXX_Size() int {
	return xxx_messageInfo_FromRequest.Size(m)
}
func (m *FromRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FromRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FromRequest proto.InternalMessageInfo

func (m *FromRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type ForwardJoinRequest struct {
	Ttl                  int32    `protobuf:"varint,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Join                 string   `protobuf:"bytes,2,opt,name=join,proto3" json:"join,omitempty"`
	From                 string   `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForwardJoinRequest) Reset()         { *m = ForwardJoinRequest{} }
func (m *ForwardJoinRequest) String() string { return proto.CompactTextString(m) }
func (*ForwardJoinRequest) ProtoMessage()    {}
func (*ForwardJoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_hyparview_d23255bfd5a25f1c, []int{2}
}
func (m *ForwardJoinRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForwardJoinRequest.Unmarshal(m, b)
}
func (m *ForwardJoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForwardJoinRequest.Marshal(b, m, deterministic)
}
func (dst *ForwardJoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForwardJoinRequest.Merge(dst, src)
}
func (m *ForwardJoinRequest) XXX_Size() int {
	return xxx_messageInfo_ForwardJoinRequest.Size(m)
}
func (m *ForwardJoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ForwardJoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ForwardJoinRequest proto.InternalMessageInfo

func (m *ForwardJoinRequest) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *ForwardJoinRequest) GetJoin() string {
	if m != nil {
		return m.Join
	}
	return ""
}

func (m *ForwardJoinRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type NeighborRequest struct {
	Priority             bool     `protobuf:"varint,1,opt,name=priority,proto3" json:"priority,omitempty"`
	From                 string   `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NeighborRequest) Reset()         { *m = NeighborRequest{} }
func (m *NeighborRequest) String() string { return proto.CompactTextString(m) }
func (*NeighborRequest) ProtoMessage()    {}
func (*NeighborRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_hyparview_d23255bfd5a25f1c, []int{3}
}
func (m *NeighborRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NeighborRequest.Unmarshal(m, b)
}
func (m *NeighborRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NeighborRequest.Marshal(b, m, deterministic)
}
func (dst *NeighborRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NeighborRequest.Merge(dst, src)
}
func (m *NeighborRequest) XXX_Size() int {
	return xxx_messageInfo_NeighborRequest.Size(m)
}
func (m *NeighborRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NeighborRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NeighborRequest proto.InternalMessageInfo

func (m *NeighborRequest) GetPriority() bool {
	if m != nil {
		return m.Priority
	}
	return false
}

func (m *NeighborRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type NeighborResponse struct {
	Accept               bool     `protobuf:"varint,1,opt,name=accept,proto3" json:"accept,omitempty"`
	From                 string   `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NeighborResponse) Reset()         { *m = NeighborResponse{} }
func (m *NeighborResponse) String() string { return proto.CompactTextString(m) }
func (*NeighborResponse) ProtoMessage()    {}
func (*NeighborResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_hyparview_d23255bfd5a25f1c, []int{4}
}
func (m *NeighborResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NeighborResponse.Unmarshal(m, b)
}
func (m *NeighborResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NeighborResponse.Marshal(b, m, deterministic)
}
func (dst *NeighborResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NeighborResponse.Merge(dst, src)
}
func (m *NeighborResponse) XXX_Size() int {
	return xxx_messageInfo_NeighborResponse.Size(m)
}
func (m *NeighborResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NeighborResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NeighborResponse proto.InternalMessageInfo

func (m *NeighborResponse) GetAccept() bool {
	if m != nil {
		return m.Accept
	}
	return false
}

func (m *NeighborResponse) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type ShuffleRequest struct {
	Ttl                  int32    `protobuf:"varint,1,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Active               []string `protobuf:"bytes,2,rep,name=active,proto3" json:"active,omitempty"`
	Passive              []string `protobuf:"bytes,3,rep,name=passive,proto3" json:"passive,omitempty"`
	From                 string   `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShuffleRequest) Reset()         { *m = ShuffleRequest{} }
func (m *ShuffleRequest) String() string { return proto.CompactTextString(m) }
func (*ShuffleRequest) ProtoMessage()    {}
func (*ShuffleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_hyparview_d23255bfd5a25f1c, []int{5}
}
func (m *ShuffleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShuffleRequest.Unmarshal(m, b)
}
func (m *ShuffleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShuffleRequest.Marshal(b, m, deterministic)
}
func (dst *ShuffleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShuffleRequest.Merge(dst, src)
}
func (m *ShuffleRequest) XXX_Size() int {
	return xxx_messageInfo_ShuffleRequest.Size(m)
}
func (m *ShuffleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShuffleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShuffleRequest proto.InternalMessageInfo

func (m *ShuffleRequest) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *ShuffleRequest) GetActive() []string {
	if m != nil {
		return m.Active
	}
	return nil
}

func (m *ShuffleRequest) GetPassive() []string {
	if m != nil {
		return m.Passive
	}
	return nil
}

func (m *ShuffleRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type ShuffleReplyRequest struct {
	Passive              []string `protobuf:"bytes,1,rep,name=passive,proto3" json:"passive,omitempty"`
	From                 string   `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShuffleReplyRequest) Reset()         { *m = ShuffleReplyRequest{} }
func (m *ShuffleReplyRequest) String() string { return proto.CompactTextString(m) }
func (*ShuffleReplyRequest) ProtoMessage()    {}
func (*ShuffleReplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_hyparview_d23255bfd5a25f1c, []int{6}
}
func (m *ShuffleReplyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShuffleReplyRequest.Unmarshal(m, b)
}
func (m *ShuffleReplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShuffleReplyRequest.Marshal(b, m, deterministic)
}
func (dst *ShuffleReplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShuffleReplyRequest.Merge(dst, src)
}
func (m *ShuffleReplyRequest) XXX_Size() int {
	return xxx_messageInfo_ShuffleReplyRequest.Size(m)
}
func (m *ShuffleReplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShuffleReplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShuffleReplyRequest proto.InternalMessageInfo

func (m *ShuffleReplyRequest) GetPassive() []string {
	if m != nil {
		return m.Passive
	}
	return nil
}

func (m *ShuffleReplyRequest) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func init() {
	proto.RegisterType((*HyparviewEmpty)(nil), "hashicorp.hyparview.example.hyparview.HyparviewEmpty")
	proto.RegisterType((*FromRequest)(nil), "hashicorp.hyparview.example.hyparview.FromRequest")
	proto.RegisterType((*ForwardJoinRequest)(nil), "hashicorp.hyparview.example.hyparview.ForwardJoinRequest")
	proto.RegisterType((*NeighborRequest)(nil), "hashicorp.hyparview.example.hyparview.NeighborRequest")
	proto.RegisterType((*NeighborResponse)(nil), "hashicorp.hyparview.example.hyparview.NeighborResponse")
	proto.RegisterType((*ShuffleRequest)(nil), "hashicorp.hyparview.example.hyparview.ShuffleRequest")
	proto.RegisterType((*ShuffleReplyRequest)(nil), "hashicorp.hyparview.example.hyparview.ShuffleReplyRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HyparviewClient is the client API for Hyparview service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HyparviewClient interface {
	Join(ctx context.Context, in *FromRequest, opts ...grpc.CallOption) (*HyparviewEmpty, error)
	ForwardJoin(ctx context.Context, in *ForwardJoinRequest, opts ...grpc.CallOption) (*HyparviewEmpty, error)
	Disconnect(ctx context.Context, in *FromRequest, opts ...grpc.CallOption) (*HyparviewEmpty, error)
	Neighbor(ctx context.Context, in *NeighborRequest, opts ...grpc.CallOption) (*NeighborResponse, error)
	Shuffle(ctx context.Context, in *ShuffleRequest, opts ...grpc.CallOption) (*HyparviewEmpty, error)
	ShuffleReply(ctx context.Context, in *ShuffleReplyRequest, opts ...grpc.CallOption) (*HyparviewEmpty, error)
}

type hyparviewClient struct {
	cc *grpc.ClientConn
}

func NewHyparviewClient(cc *grpc.ClientConn) HyparviewClient {
	return &hyparviewClient{cc}
}

func (c *hyparviewClient) Join(ctx context.Context, in *FromRequest, opts ...grpc.CallOption) (*HyparviewEmpty, error) {
	out := new(HyparviewEmpty)
	err := c.cc.Invoke(ctx, "/hashicorp.hyparview.example.hyparview.Hyparview/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyparviewClient) ForwardJoin(ctx context.Context, in *ForwardJoinRequest, opts ...grpc.CallOption) (*HyparviewEmpty, error) {
	out := new(HyparviewEmpty)
	err := c.cc.Invoke(ctx, "/hashicorp.hyparview.example.hyparview.Hyparview/ForwardJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyparviewClient) Disconnect(ctx context.Context, in *FromRequest, opts ...grpc.CallOption) (*HyparviewEmpty, error) {
	out := new(HyparviewEmpty)
	err := c.cc.Invoke(ctx, "/hashicorp.hyparview.example.hyparview.Hyparview/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyparviewClient) Neighbor(ctx context.Context, in *NeighborRequest, opts ...grpc.CallOption) (*NeighborResponse, error) {
	out := new(NeighborResponse)
	err := c.cc.Invoke(ctx, "/hashicorp.hyparview.example.hyparview.Hyparview/Neighbor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyparviewClient) Shuffle(ctx context.Context, in *ShuffleRequest, opts ...grpc.CallOption) (*HyparviewEmpty, error) {
	out := new(HyparviewEmpty)
	err := c.cc.Invoke(ctx, "/hashicorp.hyparview.example.hyparview.Hyparview/Shuffle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyparviewClient) ShuffleReply(ctx context.Context, in *ShuffleReplyRequest, opts ...grpc.CallOption) (*HyparviewEmpty, error) {
	out := new(HyparviewEmpty)
	err := c.cc.Invoke(ctx, "/hashicorp.hyparview.example.hyparview.Hyparview/ShuffleReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HyparviewServer is the server API for Hyparview service.
type HyparviewServer interface {
	Join(context.Context, *FromRequest) (*HyparviewEmpty, error)
	ForwardJoin(context.Context, *ForwardJoinRequest) (*HyparviewEmpty, error)
	Disconnect(context.Context, *FromRequest) (*HyparviewEmpty, error)
	Neighbor(context.Context, *NeighborRequest) (*NeighborResponse, error)
	Shuffle(context.Context, *ShuffleRequest) (*HyparviewEmpty, error)
	ShuffleReply(context.Context, *ShuffleReplyRequest) (*HyparviewEmpty, error)
}

func RegisterHyparviewServer(s *grpc.Server, srv HyparviewServer) {
	s.RegisterService(&_Hyparview_serviceDesc, srv)
}

func _Hyparview_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyparviewServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.hyparview.example.hyparview.Hyparview/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyparviewServer).Join(ctx, req.(*FromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hyparview_ForwardJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyparviewServer).ForwardJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.hyparview.example.hyparview.Hyparview/ForwardJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyparviewServer).ForwardJoin(ctx, req.(*ForwardJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hyparview_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyparviewServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.hyparview.example.hyparview.Hyparview/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyparviewServer).Disconnect(ctx, req.(*FromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hyparview_Neighbor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NeighborRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyparviewServer).Neighbor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.hyparview.example.hyparview.Hyparview/Neighbor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyparviewServer).Neighbor(ctx, req.(*NeighborRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hyparview_Shuffle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShuffleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyparviewServer).Shuffle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.hyparview.example.hyparview.Hyparview/Shuffle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyparviewServer).Shuffle(ctx, req.(*ShuffleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hyparview_ShuffleReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShuffleReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyparviewServer).ShuffleReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hashicorp.hyparview.example.hyparview.Hyparview/ShuffleReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyparviewServer).ShuffleReply(ctx, req.(*ShuffleReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hyparview_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hashicorp.hyparview.example.hyparview.Hyparview",
	HandlerType: (*HyparviewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Hyparview_Join_Handler,
		},
		{
			MethodName: "ForwardJoin",
			Handler:    _Hyparview_ForwardJoin_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Hyparview_Disconnect_Handler,
		},
		{
			MethodName: "Neighbor",
			Handler:    _Hyparview_Neighbor_Handler,
		},
		{
			MethodName: "Shuffle",
			Handler:    _Hyparview_Shuffle_Handler,
		},
		{
			MethodName: "ShuffleReply",
			Handler:    _Hyparview_ShuffleReply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/hyparview.proto",
}

func init() { proto.RegisterFile("proto/hyparview.proto", fileDescriptor_hyparview_d23255bfd5a25f1c) }

var fileDescriptor_hyparview_d23255bfd5a25f1c = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xbb, 0x4f, 0xe3, 0x40,
	0x10, 0xc6, 0xcf, 0x71, 0x9e, 0x93, 0x53, 0x2e, 0xda, 0xd3, 0x9d, 0xac, 0x54, 0xb9, 0x48, 0x27,
	0xa5, 0xf2, 0x49, 0x39, 0x01, 0x82, 0x02, 0x89, 0x57, 0x84, 0x28, 0x52, 0x98, 0x8e, 0xce, 0x31,
	0x1b, 0xbc, 0xc8, 0xf6, 0x2e, 0xbb, 0x9b, 0x04, 0x17, 0x14, 0x88, 0x3f, 0x1c, 0xe4, 0x8d, 0x1f,
	0x4b, 0x08, 0x92, 0x93, 0x82, 0x2a, 0xf3, 0x65, 0x76, 0x7e, 0x33, 0xa3, 0xf9, 0x64, 0xf8, 0xc5,
	0x38, 0x95, 0xf4, 0x9f, 0x1f, 0x33, 0x97, 0x2f, 0x08, 0x5e, 0xda, 0x4a, 0xa3, 0xbf, 0xbe, 0x2b,
	0x7c, 0xe2, 0x51, 0xce, 0xec, 0x22, 0x85, 0x1f, 0xdd, 0x90, 0x05, 0xb8, 0xf8, 0x67, 0xd0, 0x85,
	0xce, 0x65, 0x26, 0x2e, 0x42, 0x26, 0xe3, 0xc1, 0x1f, 0x68, 0x8f, 0x39, 0x0d, 0x1d, 0xfc, 0x30,
	0xc7, 0x42, 0x22, 0x04, 0xd5, 0x19, 0xa7, 0xa1, 0x65, 0xf4, 0x8d, 0x61, 0xcb, 0x51, 0xf1, 0x60,
	0x02, 0x68, 0x4c, 0xf9, 0xd2, 0xe5, 0xb7, 0x57, 0x94, 0x44, 0xd9, 0xcb, 0x2e, 0x98, 0x52, 0x06,
	0xea, 0x61, 0xcd, 0x49, 0xc2, 0xa4, 0xf6, 0x9e, 0x92, 0xc8, 0xaa, 0xac, 0x6a, 0x93, 0x38, 0xe7,
	0x99, 0x1a, 0xef, 0x04, 0x7e, 0x4c, 0x30, 0xb9, 0xf3, 0xa7, 0x94, 0x67, 0xb0, 0x1e, 0x34, 0x19,
	0x27, 0x94, 0x13, 0x19, 0x2b, 0x62, 0xd3, 0xc9, 0x75, 0x8e, 0xa8, 0x68, 0x88, 0x63, 0xe8, 0x16,
	0x08, 0xc1, 0x68, 0x24, 0x30, 0xfa, 0x0d, 0x75, 0xd7, 0xf3, 0x30, 0x93, 0x29, 0x21, 0x55, 0x1b,
	0xeb, 0x7d, 0xe8, 0x5c, 0xfb, 0xf3, 0xd9, 0x2c, 0xc0, 0x9f, 0xaf, 0xa3, 0x78, 0x92, 0x2c, 0xb0,
	0x55, 0xe9, 0x9b, 0xc3, 0x96, 0x93, 0x2a, 0x64, 0x41, 0x83, 0xb9, 0x42, 0x24, 0x09, 0x53, 0x25,
	0x32, 0x99, 0x77, 0xaa, 0x6a, 0x9d, 0xce, 0xe0, 0x67, 0xde, 0x89, 0x05, 0x71, 0xd6, 0x4e, 0x83,
	0x18, 0x9b, 0x21, 0xda, 0xb8, 0xa3, 0xd7, 0x1a, 0xb4, 0xf2, 0xbb, 0x21, 0x01, 0xd5, 0xe4, 0x10,
	0x68, 0x64, 0x97, 0x3a, 0xba, 0xad, 0xdd, 0xb7, 0xb7, 0x57, 0xb2, 0x66, 0xcd, 0x25, 0xdf, 0xd0,
	0xb3, 0x01, 0x6d, 0xcd, 0x05, 0xe8, 0xb0, 0x6c, 0xf3, 0x0f, 0xce, 0xd9, 0x7d, 0x86, 0x18, 0xe0,
	0x9c, 0x08, 0x8f, 0x46, 0x11, 0xf6, 0xe4, 0xd7, 0xae, 0xff, 0x04, 0xcd, 0xcc, 0x70, 0x68, 0xbf,
	0x24, 0x64, 0xcd, 0xe4, 0xbd, 0x83, 0xad, 0xeb, 0x56, 0xce, 0x56, 0x9b, 0x37, 0x52, 0x17, 0xa1,
	0xb2, 0x2b, 0xbc, 0xf7, 0xf7, 0xee, 0x9b, 0xbf, 0x18, 0xf0, 0x5d, 0x77, 0x30, 0x3a, 0xda, 0x76,
	0x80, 0xc2, 0xf6, 0x3b, 0x4f, 0x71, 0xda, 0xb8, 0xa9, 0xa9, 0x0f, 0xdd, 0xb4, 0xae, 0x7e, 0xfe,
	0xbf, 0x05, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x3f, 0xc2, 0x98, 0x08, 0x05, 0x00, 0x00,
}
